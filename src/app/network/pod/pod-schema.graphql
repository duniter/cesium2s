# This file was generated. Do not edit manually.

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
  "refresh the cache entry"
  refresh: Boolean! = false,
  "measured in seconds"
  ttl: Int! = 60
) on QUERY

type AddTransactionResponse {
  message: String!
  success: Boolean!
}

type DeleteProfileResponse {
  message: String!
  success: Boolean!
}

type MigrateProfileResponse {
  message: String!
  success: Boolean!
}

type UpdateProfileResponse {
  message: String!
  success: Boolean!
}

"mutation root"
type mutation_root {
  "addTransaction"
  addTransaction(address: String!, comment: String!, hash: String!, id: String!, signature: String!): AddTransactionResponse
  "deleteProfile"
  deleteProfile(address: String!, hash: String!, signature: String!): DeleteProfileResponse
  "migrateProfile"
  migrateProfile(addressNew: String!, addressOld: String!, hash: String!, signature: String!): MigrateProfileResponse
  "updateProfile"
  updateProfile(address: String!, avatarBase64: String, city: String, description: String, geoloc: GeolocInput, hash: String!, signature: String!, socials: [SocialInput!], title: String): UpdateProfileResponse
}

"columns and relationships of \"profiles\""
type profiles {
  "cid of avatar"
  avatar: String
  city: String
  "CID of the latest data from which this document comes from"
  data_cid: String
  description: String
  geoloc: point
  "CID of the latest index request that modified this document"
  index_request_cid: String!
  "base58 pubkey of profile owner"
  pubkey: String!
  socials(
    "JSON select path"
    path: String
  ): jsonb
  "timestamp of the latest index request that modified this document"
  time: timestamptz!
  "title of c+ profile"
  title: String
}

"aggregated selection of \"profiles\""
type profiles_aggregate {
  aggregate: profiles_aggregate_fields
  nodes: [profiles!]!
}

"aggregate fields of \"profiles\""
type profiles_aggregate_fields {
  count(columns: [profiles_select_column!], distinct: Boolean): Int!
  max: profiles_max_fields
  min: profiles_min_fields
}

"aggregate max on columns"
type profiles_max_fields {
  "cid of avatar"
  avatar: String
  city: String
  "CID of the latest data from which this document comes from"
  data_cid: String
  description: String
  "CID of the latest index request that modified this document"
  index_request_cid: String
  "base58 pubkey of profile owner"
  pubkey: String
  "timestamp of the latest index request that modified this document"
  time: timestamptz
  "title of c+ profile"
  title: String
}

"aggregate min on columns"
type profiles_min_fields {
  "cid of avatar"
  avatar: String
  city: String
  "CID of the latest data from which this document comes from"
  data_cid: String
  description: String
  "CID of the latest index request that modified this document"
  index_request_cid: String
  "base58 pubkey of profile owner"
  pubkey: String
  "timestamp of the latest index request that modified this document"
  time: timestamptz
  "title of c+ profile"
  title: String
}

type query_root {
  "fetch data from the table: \"profiles\""
  profiles(
    "distinct select on columns"
    distinct_on: [profiles_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [profiles_order_by!],
    "filter the rows returned"
    where: profiles_bool_exp
  ): [profiles!]!
  "fetch aggregated fields from the table: \"profiles\""
  profiles_aggregate(
    "distinct select on columns"
    distinct_on: [profiles_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [profiles_order_by!],
    "filter the rows returned"
    where: profiles_bool_exp
  ): profiles_aggregate!
  "fetch data from the table: \"profiles\" using primary key columns"
  profiles_by_pk(
    "base58 pubkey of profile owner"
    pubkey: String!
  ): profiles
}

type subscription_root {
  "fetch data from the table: \"profiles\""
  profiles(
    "distinct select on columns"
    distinct_on: [profiles_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [profiles_order_by!],
    "filter the rows returned"
    where: profiles_bool_exp
  ): [profiles!]!
  "fetch aggregated fields from the table: \"profiles\""
  profiles_aggregate(
    "distinct select on columns"
    distinct_on: [profiles_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [profiles_order_by!],
    "filter the rows returned"
    where: profiles_bool_exp
  ): profiles_aggregate!
  "fetch data from the table: \"profiles\" using primary key columns"
  profiles_by_pk(
    "base58 pubkey of profile owner"
    pubkey: String!
  ): profiles
  "fetch data from the table in a streaming manner: \"profiles\""
  profiles_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [profiles_stream_cursor_input]!,
    "filter the rows returned"
    where: profiles_bool_exp
  ): [profiles!]!
}

"ordering argument of a cursor"
enum cursor_ordering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}

"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}

"select columns of table \"profiles\""
enum profiles_select_column {
  "column name"
  avatar
  "column name"
  city
  "column name"
  data_cid
  "column name"
  description
  "column name"
  geoloc
  "column name"
  index_request_cid
  "column name"
  pubkey
  "column name"
  socials
  "column name"
  time
  "column name"
  title
}

scalar jsonb

scalar point

scalar timestamptz

input GeolocInput {
  latitude: Float!
  longitude: Float!
}

input SocialInput {
  type: String
  url: String!
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}

input jsonb_cast_exp {
  String: String_comparison_exp
}

"Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'."
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  "is the column contained in the given json value"
  _contained_in: jsonb
  "does the column contain the given json value at the top level"
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  "does the string exist as a top-level key in the column"
  _has_key: String
  "do all of these strings exist as top-level keys in the column"
  _has_keys_all: [String!]
  "do any of these strings exist as top-level keys in the column"
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"Boolean expression to compare columns of type \"point\". All fields are combined with logical 'AND'."
input point_comparison_exp {
  _eq: point
  _gt: point
  _gte: point
  _in: [point!]
  _is_null: Boolean
  _lt: point
  _lte: point
  _neq: point
  _nin: [point!]
}

"Boolean expression to filter rows from the table \"profiles\". All fields are combined with a logical 'AND'."
input profiles_bool_exp {
  _and: [profiles_bool_exp!]
  _not: profiles_bool_exp
  _or: [profiles_bool_exp!]
  avatar: String_comparison_exp
  city: String_comparison_exp
  data_cid: String_comparison_exp
  description: String_comparison_exp
  geoloc: point_comparison_exp
  index_request_cid: String_comparison_exp
  pubkey: String_comparison_exp
  socials: jsonb_comparison_exp
  time: timestamptz_comparison_exp
  title: String_comparison_exp
}

"Ordering options when selecting data from \"profiles\"."
input profiles_order_by {
  avatar: order_by
  city: order_by
  data_cid: order_by
  description: order_by
  geoloc: order_by
  index_request_cid: order_by
  pubkey: order_by
  socials: order_by
  time: order_by
  title: order_by
}

"Streaming cursor of the table \"profiles\""
input profiles_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: profiles_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input profiles_stream_cursor_value_input {
  "cid of avatar"
  avatar: String
  city: String
  "CID of the latest data from which this document comes from"
  data_cid: String
  description: String
  geoloc: point
  "CID of the latest index request that modified this document"
  index_request_cid: String
  "base58 pubkey of profile owner"
  pubkey: String
  socials: jsonb
  "timestamp of the latest index request that modified this document"
  time: timestamptz
  "title of c+ profile"
  title: String
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

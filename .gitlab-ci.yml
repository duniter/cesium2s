# ---------------------------------------------------------------
# Global
# ---------------------------------------------------------------

# default image
image: node:18-slim

stages:
  - environment
  - build
  - alt_build
  - package
  - release
  - deploy

workflow:
  rules:
    - changes:
        - docker/**/Dockerfile
        - src/**/*
        - android/**/*
        - .gitlab-ci.yml
        - package.json
        - package-lock.json
        - tsconfig*.json
        - angular.json
        - scripts/**/*

# ---------------------------------------------------------------
# Global variables
# ---------------------------------------------------------------

variables:
  CI_BUILD_IMAGE: $CI_REGISTRY_IMAGE/build:develop
  CI_BUILD_ELECTRON_IMAGE: electronuserland/builder:18-wine
  BUILD_CACHE_DIR: /tmp/.build-cache
  BUILD_ENVIRONMENT: prod
  DOCKER_BUILDKIT: 1
  ARTIFACT_ZIP_FILES: ${OUTPUT_DIR}/${CI_PROJECT_NAME}-*.zip
  ENV_FILE: variables.env
  IONIC_CLI_VERSION: 7.2.0
  ANGULAR_CLI_VERSION: 17.0.3

# ---------------------------------------------------------------
# Jobs templates
# ---------------------------------------------------------------
.configure-git-template: &git-setup
  tags: [ kepler ]
  before_script:
    - echo "--- Fetch origin"
    - git remote set-url origin "https://gitlab+access-token:${CI_ACCESS_TOKEN}@git.duniter.org/${CI_PROJECT_PATH}.git"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git fetch origin

.docker:
  image: docker:latest
  tags: [ kepler ]
  services:
    - docker:dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  after_script:
    - docker logout ${CI_REGISTRY}
  allow_failure: false

.configure-android-template: &android-setup
  image: ${CI_BUILD_IMAGE}
  tags: [ kepler ]
  before_script:
    # Get project dependencies
    - ls -artl "${BUILD_CACHE_DIR}"
    - ln -s "${BUILD_CACHE_DIR}/node_modules" node_modules
    # Install Android environment (e.g. will create local.properties)
    - mkdir -p .local
    - npm run android:install
    - source .local/env.sh
    # Prepare local.properties file
    - echo "--- Preparing Android 'local.properties' file ..."
    - if [[ "_${ANDROID_SDK_ROOT}" == "_" ]]; then echo "Missing required variable ANDROID_SDK_ROOT. Cannot prepare Android 'local.properties' file"; exit 1; fi
    - echo 'sdk.dir=${ANDROID_SDK_ROOT}' > android/local.properties
    # Prepare for signing
    - echo "--- Preparing Android 'release-signing.properties' file ..."
    - if [[ "$BUILD_ENVIRONMENT" == "prod" && "_${ANDROID_STORE_PASSWORD}" == "_" ]]; then echo "Missing required variable ANDROID_STORE_PASSWORD"; exit 1; fi
    - if [[ "$BUILD_ENVIRONMENT" == "prod" && "_${ANDROID_KEY_ALIAS}" == "_" ]]; then echo "Missing required variable ANDROID_KEY_ALIAS"; exit 1; fi
    - if [[ "$BUILD_ENVIRONMENT" == "prod" && "_${ANDROID_KEY_PASSWORD}" == "_" ]]; then echo "Missing required variable ANDROID_KEY_PASSWORD"; exit 1; fi
    - echo "storeFile=Cesium.keystore" > android/app/release-signing.properties
    - echo "storePassword=${ANDROID_STORE_PASSWORD}" >> android/app/release-signing.properties
    - echo "keyAlias=${ANDROID_KEY_ALIAS}" >> android/app/release-signing.properties
    - echo "keyPassword=${ANDROID_KEY_PASSWORD}" >> android/app/release-signing.properties
    # Show version
    - npm version
    - export NODE_OPTIONS=--max-old-space-size=4096

.configure-electron-template: &electron-setup
  image: ${CI_BUILD_ELECTRON_IMAGE}
  tags: [ kepler ]
  before_script:
    - npm install
    - npm run electron:install

.configure-webext-template: &webext-setup
  image: ${CI_BUILD_IMAGE}
  tags: [ kepler ]
  before_script:
    - ls -artl "${BUILD_CACHE_DIR}"
    - ln -s "${BUILD_CACHE_DIR}/node_modules" node_modules
    - npm install web-ext

# ---------------------------------------------------------------
# Environment jobs : Create docker image for builds/release, this
# offers possibility to cache project dependencies so we don't
# have to download them every time.
# ---------------------------------------------------------------
build:env:
  extends: .docker
  stage: environment
  script:
    # Build and push the CI image
    - docker build --cache-from ${CI_BUILD_IMAGE} -t ${CI_BUILD_IMAGE} --build-arg="BUILDKIT_INLINE_CACHE=1" --build-arg="CACHE_DIR=${BUILD_CACHE_DIR}" --build-arg="IMAGE_REGISTRY=${DOCKER_IMAGE_REGISTRY}" --build-arg="IONIC_CLI_VERSION=${IONIC_CLI_VERSION}" --build-arg="ANGULAR_CLI_VERSION=${ANGULAR_CLI_VERSION}" -f docker/build/Dockerfile .
    - docker push ${CI_BUILD_IMAGE}
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - .gitlab-ci.yml
        - docker/build/Dockerfile
        - scripts/**/*
        - package.json
        - package-lock.json

# ---------------------------------------------------------------
# Build jobs
# ---------------------------------------------------------------
.build:
  stage: build
  tags: [ kepler ]
  before_script:
    # Get project dependencies
    - ls -artl "${BUILD_CACHE_DIR}"
    - ln -s "${BUILD_CACHE_DIR}/node_modules" node_modules
    # Show version
    - npm version
  script:
    # Build
    - npm run build:${BUILD_ENVIRONMENT}
  after_script:
    # Remember version
    - APP_VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
  artifacts:
    paths:
      - www
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 72 hours

build:
  extends: .build
  needs: ["build:env"]
  image: ${CI_BUILD_IMAGE}
  only:
    - develop

build:feature:
  extends: .build
  image: ${CI_BUILD_IMAGE}
  script:
    # Install deps, because it may have changed since the last build image (build from develop)
    - npm install
    # Build
    - npm run build:${BUILD_ENVIRONMENT}
  only:
    - /^feature\/.*/
    - /^features\/.*/
  when: manual

failsafe-build:
  extends: .build
  stage: alt_build
  when: on_failure
  script:
    # Install global dependencies
    - npm install -g @ionic/cli@${IONIC_CLI_VERSION} @angular/cli@${ANGULAR_CLI_VERSION}
    # Update project dependencies
    - npm install --unsafe-perm --force --silent
    # Build
    - npm run build:${BUILD_ENVIRONMENT}
  only:
    - develop
    - /^feature\/.*/
    - /^features\/.*/

# ---------------------------------------------------------------
# Package jobs
# ---------------------------------------------------------------
package:android:
  <<: *android-setup
  stage: package
  needs: [ build ]
  script:
    # Build APK
    - echo "--- Building Android APK ..."
    - npm run android:build:${BUILD_ENVIRONMENT}
    - npm run android:package:${BUILD_ENVIRONMENT}
  after_script:
    # Make APK file available for next jobs
    - mkdir -p "${CI_PROJECT_DIR}/release/"
    - mv -f ${CI_PROJECT_DIR}/android/app/build/outputs/apk/*/*.apk $CI_PROJECT_DIR/release/
  artifacts:
    paths:
      - release
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 72 hours
  only:
    - develop
  when: manual

.package:electron:
  <<: *electron-setup
  stage: package
  script:
    - echo "--- Building Electron packages ..."
    - npm run electron:build:${BUILD_ENVIRONMENT}
    - npm run electron:package:${BUILD_ENVIRONMENT}
  after_script:
    - mkdir -p "${CI_PROJECT_DIR}/release/"
    - mv -f ${CI_PROJECT_DIR}/electron/dist/*.{AppImage,deb,exe} $CI_PROJECT_DIR/release/
  artifacts:
    paths:
      - release
    expire_in: 72 hours
  only:
    - develop
  when: manual

package:electron:
  extends: .package:electron
  needs: [ build ]
  only:
    - develop

package:electron:feature:
  extends: .package:electron
  needs: [ build:feature ]
  only:
    - /^feature\/.*/
    - /^features\/.*/

.package:webext:
  <<: *webext-setup
  image: ${CI_BUILD_IMAGE}
  stage: package
  script:
    - echo "--- Building webext package ..."
    - npm run webext:build:${BUILD_ENVIRONMENT}
    - npm run webext:package:${BUILD_ENVIRONMENT}
  artifacts:
    paths:
      - release
  only:
    - develop
  when: manual

package:webext:
  extends: .package:webext
  needs: [ build ]
  only:
    - develop

package:webext:feature:
  extends: .package:webext
  needs: [ build:feature ]
  only:
    - /^feature\/.*/
    - /^features\/.*/

# ---------------------------------------------------------------
# Release jobs
# ---------------------------------------------------------------
.release:
  <<: *git-setup
  stage: release
  script:
    - if [[ "_${RELEASE_VERSION}" == "_" ]]; then echo "Missing required variable RELEASE_VERSION"; exit 1; fi
    - ls -artl "${BUILD_CACHE_DIR}"
    - ln -s "${BUILD_CACHE_DIR}/node_modules" node_modules
    - echo "--- Release in progress"
    - git checkout -B release/${RELEASE_VERSION}
    - echo "--- Manage app version"
    - npm run version:get
    - npm version:set ${RELEASE_VERSION}
    # Copy cached dependencies and build
    - ls -artl "${BUILD_CACHE_DIR}"
    - ln -s "${BUILD_CACHE_DIR}/node_modules" node_modules
    # Show version
    - npm version
    # Build web (if need)
    - echo "--- Building 'www'"
    - export NODE_OPTIONS=--max-old-space-size=4096
    - if [[ "$BUILD_ENVIRONMENT" != "prod" || ! -d "www" ]]; then npm run build:prod; fi
    # Git process for release (ISO gitflow)
    - echo "--- Fishing release"
    - git add package.json electron/package.json src/manifest.json resources/webext/manifest.json android/app/build.gradle install.sh
    - git commit -m "Prepare release ${RELEASE_VERSION}" --no-verify
    - if [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; then git checkout master; fi
    - if [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; then git reset --hard origin/master
    - if [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; then git merge --no-ff --no-edit -m "Release ${RELEASE_VERSION}" "release/${RELEASE_VERSION}"
    - git tag -a "${RELEASE_VERSION}" -m "${RELEASE_VERSION}"
    - git checkout ${CI_COMMIT_REF_NAME}
    - git reset --hard origin/${CI_COMMIT_REF_NAME}
    - git merge --no-ff --no-edit -m "[skip ci] Release ${RELEASE_VERSION}" "release/${RELEASE_VERSION}"
    - git push origin ${CI_COMMIT_REF_NAME}
    - if [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; git push origin master
    - git push origin refs/tags/${RELEASE_VERSION}
    - git branch -D "release/${RELEASE_VERSION}"
  after_script:
    - if [[ "_${RELEASE_VERSION}" == "_" ]]; then echo "Missing required variable RELEASE_VERSION"; exit 1; fi
    # Remember version
    - APP_VERSION=${RELEASE_VERSION}
    - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
    - mkdir -p ${CI_PROJECT_DIR}/release
    # Zip output
    - zipFileName=${CI_PROJECT_NAME}-${APP_VERSION}.zip
    - zipFile=${CI_PROJECT_DIR}/release/${zipFileName}
    - if [[ -f "${zipFile}" ]]; then rm "${zipFile}"; fi
    - cd ${CI_PROJECT_DIR}/www || exit 1
    - if ! zip -q -r "${zipFile}" . ; then echo "Cannot create the archive for the web artifact"; exit 1; fi
    - cd ${CI_PROJECT_DIR}
    - targetUrlZip="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${zipFileName}"
    - echo "Deploy to gitlab package:"
    - echo " File= ${zipFile}"
    - echo " Url= ${targetUrlZip}"
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${zipFile}" "${targetUrlZip}"; then exit 1; fi'
    # Changelog output
    - changeLogFileName="${CI_PROJECT_NAME}-${APP_VERSION}-changelog.md"
    - changeLogFile="${CI_PROJECT_DIR}/release/${changeLogFileName}"
    - targetUrlChangeLog="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${changeLogFileName}"
    - node scripts/node/release.js --token=${CI_JOB_TOKEN} --description="${RELEASE_VERSION}" > "${changeLogFile}"
    # - echo "Deploy change log:"
    # - echo " File= ${changeLogFileName}"
    # - echo " Url= ${targetUrlChangeLog}"
    # - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${changeLogFile}" "${targetUrlChangeLog}"; then exit 1; fi'
  artifacts:
    paths:
      - release
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 24 hours
  allow_failure: false
  when: manual

release:
  extends: .release
  image: ${CI_BUILD_IMAGE}
  needs: [build]
  only:
    - develop

failsafe-release:
  extends: .release
  needs: [failsafe-build]
  only:
    - develop

release:feature:
  extends: .release
  image: ${CI_BUILD_IMAGE}
  needs: [build:feature]
  only:
    - /^feature\/.*/
    - /^features\/.*/
  when: manual

release:tags:
  <<: *git-setup
  image: ${CI_BUILD_IMAGE}
  stage: release
  script:
    - APP_VERSION=${CI_COMMIT_TAG}
    - echo "APP_VERSION=${APP_VERSION}" > ${ENV_FILE}
    - echo "--- Release in progress"
    - git checkout -b release/${CI_COMMIT_TAG}
    # Copy cached dependencies and build
    - ls -artl "${BUILD_CACHE_DIR}"
    - ln -s "${BUILD_CACHE_DIR}/node_modules" node_modules
    # Show version
    - npm version
    # Build
    - export NODE_OPTIONS=--max-old-space-size=4096
    - npm run build:prod
  after_script:
    - mkdir -p ${CI_PROJECT_DIR}/release
    # Zip output
    - fileName=${CI_PROJECT_NAME}-${APP_VERSION}.zip
    - releaseFile=${CI_PROJECT_DIR}/release/${fileName}
    - if [[ -f "${releaseFile}" ]]; then rm "${releaseFile}"; fi
    - cd ${CI_PROJECT_DIR}/www || exit 1
    - if ! zip -q -r "${releaseFile}" . ; then echo "Cannot create the archive for the web artifact"; exit 1; fi
    - cd ..
    - echo "--- Deploy to gitlab package ${targetUrl} ..."
    - targetUrl="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${fileName}"
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${releaseFile}" "${targetUrl}"; then exit 1; fi'
  artifacts:
    paths:
      - release
    reports:
      dotenv: ${ENV_FILE}
    expire_in: 24 hours
  allow_failure: false
  when: manual
  only:
    - tags

gitlab-release:
  stage: release
  tags: [ kepler ]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "running release for ${CI_COMMIT_TAG}"
    - changeLogFileName="${CI_PROJECT_NAME}-${APP_VERSION}-changelog.md"
    - changeLogFile="${CI_PROJECT_DIR}/release/${changeLogFileName}"
    # - targetUrlChangeLog="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${changeLogFileName}"
    - export EXTRA_DESCRIPTION="$(cat ${changeLogFile})"
    - echo -e "Extra description :\n${EXTRA_DESCRIPTION}"
  release:
    name: "Release ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}"
    description: "Created using the release-cli $EXTRA_DESCRIPTION"
    tag_name: "${CI_COMMIT_TAG}"
    ref: "${CI_COMMIT_TAG}"
  only:
    - tags

# ---------------------------------------------------------------
# Deploy jobs
# ---------------------------------------------------------------
.deploy:android:
  <<: *android-setup
  stage: deploy
  needs: [release]
  script:
    - sourceFile="${CI_PROJECT_DIR}/android/app/build/outputs/apk/release/app-release.apk"
    # Build APK (if not already done)
    - if [[ ! -f "${sourceFile}" ]]; then npm run android:build:prod; fi
    - if [[ ! -f "${sourceFile}" ]]; then npm run android:package:prod; fi
    # Deploy as a release package
    - fileName=${CI_PROJECT_NAME}-${APP_VERSION}-android.apk
    - releaseFile=${CI_PROJECT_DIR}/release/${fileName}
    - if [[ -f "${releaseFile}" ]]; then rm "${releaseFile}"; fi
    - mv "${sourceFile}" "${releaseFile}"
    - targetUrl="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${fileName}"
    - echo "--- Deploy to gitlab package ${targetUrl} ..."
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${releaseFile}" "${targetUrl}"; then exit 1; fi'
    - npm run release:link --token=${CI_JOB_TOKEN} "${APP_VERSION}" "${fileName}" "${targetUrl}"
  artifacts:
    paths:
      - release
    expire_in: 24 hours
  allow_failure: true
  only:
    - develop

deploy:android:
  extends: .deploy:android
  needs: [release]

failsafe-deploy:android:
  extends: .deploy:android
  needs: [failsafe-release]

deploy:android:tags:
  extends: .deploy:android
  needs: [release:tags]
  only:
    - tags

.deploy:electron:
  <<: *electron-setup
  stage: deploy
  script:
    - echo "--- Building Electron linux package ..."
    - npm run electron:build:prod
    - npm run electron:package:prod
  after_script:
    - mkdir -p "${CI_PROJECT_DIR}/release/"
    - mv -f ${CI_PROJECT_DIR}/electron/dist/*.{AppImage,deb,exe} $CI_PROJECT_DIR/release/
    # Deploy Linux Debian
    - fileName=${CI_PROJECT_NAME}-${APP_VERSION}-linux-amd64.deb
    - releaseFile=${CI_PROJECT_DIR}/release/${fileName}
    - targetUrl="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${fileName}"
    - echo "--- Deploy to gitlab package ${targetUrl} ..."
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${releaseFile}" "${targetUrl}"; then exit 0; fi'
    - npm run release:link --token=${CI_JOB_TOKEN} "${APP_VERSION}" "${fileName}" "${targetUrl}"
    # Deploy Linux AppImage
    - fileName=${CI_PROJECT_NAME}-${APP_VERSION}-linux-x86_64.AppImage
    - releaseFile=${CI_PROJECT_DIR}/release/${fileName}
    - targetUrl="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${fileName}"
    - echo "--- Deploy to gitlab package ${targetUrl} ..."
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${releaseFile}" "${targetUrl}"; then exit 1; fi'
    - npm run release:link --token=${CI_JOB_TOKEN} "${APP_VERSION}" "${fileName}" "${targetUrl}"
    # Deploy Windows exe
    - fileName=${CI_PROJECT_NAME}-${APP_VERSION}-windows-amd64.exe
    - releaseFile=${CI_PROJECT_DIR}/release/${fileName}
    - targetUrl="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${fileName}"
    - echo "--- Deploy to gitlab package ${targetUrl} ..."
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${releaseFile}" "${targetUrl}"; then exit 1; fi'
    - npm run release:link --token=${CI_JOB_TOKEN} "${APP_VERSION}" "${fileName}" "${targetUrl}"
  artifacts:
    paths:
      - release
    expire_in: 24 hours
  allow_failure: true
  only:
    - develop

deploy:electron:
  extends: .deploy:electron
  needs: [release]

failsafe-deploy:electron:
  extends: .deploy:electron
  needs: [failsafe-release]

deploy:electron:tags:
  extends: .deploy:electron
  needs: [release:tags]
  only:
    - tags

.deploy:webext:
  <<: *webext-setup
  stage: deploy
  script:
    - npm run webext:build:prod
    - npm run webext:package:prod
    - npm run webext:deploy:${DEPLOY_ENVIRONMENT}
  after_script:
    - ls -artl "${CI_PROJECT_DIR}/release"
    - fileName=${CI_PROJECT_NAME}-${APP_VERSION}.xpi
    - releaseFile=${CI_PROJECT_DIR}/release/${fileName}
    - targetUrl="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${APP_VERSION}/${fileName}"
    - echo "--- Deploy to gitlab package ${targetUrl} ..."
    - 'if ! curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${releaseFile}" "${targetUrl}"; then exit 1; fi'
    - npm run release:link --token=${CI_JOB_TOKEN} "${APP_VERSION}" "${fileName}" "${targetUrl}"
  artifacts:
    paths:
      - release
    expire_in: 24 hours
  only:
    - develop
  when: manual

deploy:webext:prerelease:
  extends: .deploy:webext
  needs: [release]
  variables:
    DEPLOY_ENVIRONMENT: 'test'

#deploy:webext:release:
#  extends: .deploy:webext
#  stage: package
#  needs: [release]
#  variables:
#    DEPLOY_ENVIRONMENT: 'prod'

#
# failsafe-deploy:webext:
#   extends: .deploy:webext
#   needs: [failsafe-release]
#
# deploy:webext:tags:
#   extends: .deploy:webext
#   needs: [release:tags]
#   only:
#     - tags
